authors: geeksforgeeks
caption: raise clause
created: 20250605014925809
description: Python中的raise的语法跟用法
medium: Website
modified: 20250605020120850
modifier: uzvg
progress: Completed
rating: Plain
source: keywords(1749028332441)
tags: LiteratureNotes
title: raise clause(1749088165809)
type: text/vnd.tiddlywiki
url: 
visibility: Public
year: 2025-06

!! 一、作用：

* raise 是用来中断当前流程并抛出异常的。
* 程序是否“终止”，取决于有没有地方捕获这个异常。
* 如果没人捕获，它会沿调用栈传播，最终导致程序终止。
* 如果被 except 捕获，程序可以继续运行。

!! 二、`raise` 语句的语法

!!! 1. 基本语法：

```python
raise ExceptionType("错误信息")
```

* `ExceptionType` 是一个异常类，比如 `ValueError`、`TypeError`、`RuntimeError` 等。
* `"错误信息"` 是可选的异常描述，通常用于提示具体出错原因。

!!! 2. 重新引发捕获的异常：

```python
s = 'apple'
try:
    num = int(s)
except:
    # 处理一些事情
    raise  # 重新抛出当前捕获的异常
```

!! 三、常见使用场景

!!! 1. 参数或输入校验

```python
def set_age(age):
    if age < 0:
        raise ValueError("年龄不能为负数")
```

* 当用户输入不合理的数据时，抛出异常提醒。

!!! 2. 业务逻辑错误

```python
def divide(a, b):
    if b == 0:
        raise ZeroDivisionError("除数不能为0")
    return a / b
```

* 在特定逻辑不满足时阻止程序继续执行。

!!! 3. 自定义异常

```python
class CustomError(Exception):
    pass

def do_something(flag):
    if not flag:
        raise CustomError("自定义错误触发")
```

!!! 4. 重新抛出异常（常用于日志记录后不吞掉异常）

```python
try:
    risky_operation()
except Exception as e:
    log_error(e)
    raise  # 让外部知道这个异常仍然存在
```

!!! 5. 在 `assert` 无法满足的复杂条件下替代断言使用

```python
if not user.is_authenticated:
    raise PermissionError("用户未登录")
```

<<twks-tip "`raise` 不带参数时只能在 `except` 块中使用，表示重新抛出当前异常。">>
<<twks-caution "不建议用于流程控制，应仅用于处理“异常”情况。">>