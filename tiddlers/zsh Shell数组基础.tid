created: 20250618091333926
description: zsh Shell数组学习笔记
modified: 20250701153922823
progress: Completed
rating: Plain
tags: PermanentNotes zsh
title: zsh Shell数组基础
type: text/vnd.tiddlywiki
visibility: Public

!! 1. 数组声明与初始化

!!! 1.1 基本声明方式

```bash
# 方式1: 使用括号声明
arr=(element1 element2 element3)

# 方式2: 逐个赋值
arr[1]=first
arr[2]=second
arr[3]=third

# 方式3: 使用 typeset 命令
typeset -a arr=(one two three)

# 方式4: 空数组声明
empty_array=()
```

!!! 1.2 特殊声明方式

```bash
# 从命令输出创建数组
files=($(ls))
# 或者使用更安全的方式
files=(*)

# 从字符串分割创建数组
string="apple,banana,orange"
fruits=(${(s:,:)string})

# 数字序列数组
numbers=({1..10})
letters=({a..z})
```

!! 2. 数组访问与操作

!!! 2.1 基本访问

```bash
arr=(apple banana cherry)

# 访问单个元素 (索引从1开始)
echo $arr[1]        # apple
echo ${arr[2]}      # banana

# 访问所有元素
echo $arr[@]        # apple banana cherry
echo $arr[*]        # apple banana cherry
echo ${arr[@]}      # apple banana cherry

# 获取数组长度
echo ${#arr[@]}     # 3
echo ${#arr}        # 3
```

!!! 2.2 数组索引特性

```bash
# zsh数组索引从1开始(不是0)
arr=(a b c d e)
echo $arr[1]        # a (第一个元素)
echo $arr[0]        # (空值，索引0不存在)

# 负数索引(从末尾开始)
echo $arr[-1]       # e (最后一个元素)
echo $arr[-2]       # d (倒数第二个)
```

!! 3. 数组切片操作

!!! 3.1 基本切片语法

```bash
arr=(a b c d e f g h)

# 语法: ${数组名[开始索引,结束索引]}
echo ${arr[2,4]}    # b c d (从索引2到4)
echo ${arr[3,-1]}   # c d e f g h (从索引3到最后)
echo ${arr[1,3]}    # a b c (从索引1到3)
```

!!! 3.2 高级切片操作

```bash
arr=(1 2 3 4 5 6 7 8 9 10)

# 指定步长
echo ${arr[1,10,2]} # 1 3 5 7 9 (每隔一个取值)

# 使用变量作为索引
start=2
end=5
echo ${arr[$start,$end]}    # 2 3 4 5

# 切片赋值
arr[2,4]=(x y z)   # 替换索引2-4的元素
echo ${arr[@]}     # 1 x y z 5 6 7 8 9 10
```

!!! 3.3 切片的特殊用法

```bash
arr=(apple banana cherry date elderberry)

# 从某个位置开始到结尾
echo ${arr[3,-1]}   # cherry date elderberry

# 只取前几个元素
echo ${arr[1,3]}    # apple banana cherry

# 只取最后几个元素
echo ${arr[-3,-1]}  # cherry date elderberry
```

!! 4. 数组修饰符

!!! 4.1 基本修饰符

```bash
arr=(Apple Banana Cherry)

# (L) - 转换为小写
echo ${(L)arr[@]}   # apple banana cherry

# (U) - 转换为大写
echo ${(U)arr[@]}   # APPLE BANANA CHERRY

# (C) - 首字母大写
echo ${(C)arr[@]}   # Apple Banana Cherry
```

!!! 4.2 字符串处理修饰符

```bash
# 参数展开修饰符可以直接应用于数组
paths=(/usr/bin/ls /home/user/file.txt /var/log/system.log)

# :t - 获取文件尾部(basename)
echo ${paths[@]:t}      # ls file.txt system.log

# :h - 获取文件头部(dirname)  
echo ${paths[@]:h}      # /usr/bin /home/user /var/log

# :r - 移除文件扩展名
files=(file1.txt file2.pdf file3.doc)
echo ${files[@]:r}      # file1 file2 file3

# :e - 获取文件扩展名
echo ${files[@]:e}      # txt pdf doc

# 也可以对单个元素使用
echo ${files[1]:t}      # file1.txt
echo ${files[1]:r}      # file1
```

!!! 4.3 排序和唯一性修饰符

```bash
numbers=(3 1 4 1 5 9 2 6 5)

# (o) - 升序排序
echo ${(o)numbers[@]}   # 1 1 2 3 4 5 5 6 9

# (O) - 降序排序
echo ${(O)numbers[@]}   # 9 6 5 5 4 3 2 1 1

# (u) - 去重并排序
echo ${(u)numbers[@]}   # 1 2 3 4 5 6 9

# (n) - 数值排序
strings=("10" "2" "1" "20")
echo ${(n)strings[@]}   # 1 2 10 20 (数值排序)
echo ${(o)strings[@]}   # 1 10 2 20 (字典排序)
```

!!! 4.4 连接和分割修饰符

```bash
arr=(apple banana cherry)

# (j:分隔符:) - 用指定分隔符连接
echo ${(j:,:)arr[@]}    # apple,banana,cherry
echo ${(j: | :)arr[@]}  # apple | banana | cherry

# (s:分隔符:) - 按指定分隔符分割
string="apple,banana,cherry"
result=(${(s:,:)string})
echo ${result[@]}       # apple banana cherry
```

!!! 4.5 关联数组的索引和值修饰符

```bash
# 注意：(k) 和 (v) 修饰符主要用于关联数组，对普通数组无效果

# 声明关联数组
typeset -A assoc_arr
assoc_arr=(name John age 30 city Tokyo)

# (k) - 获取关联数组的键
echo ${(k)assoc_arr[@]}     # name age city

# (v) - 获取关联数组的值 (默认行为)
echo ${(v)assoc_arr[@]}     # John 30 Tokyo
echo ${assoc_arr[@]}        # John 30 Tokyo (同上)

# (kv) - 同时获取键和值
echo ${(kv)assoc_arr[@]}    # name John age 30 city Tokyo

# 对于普通索引数组，这些修饰符被忽略
regular_arr=(apple banana cherry)
echo ${(k)regular_arr[@]}   # apple banana cherry (与原数组相同)
echo ${(v)regular_arr[@]}   # apple banana cherry (与原数组相同)
```

!!! 4.6 组合修饰符

```bash
files=(File1.TXT file2.pdf FILE3.DOC)

# 组合多个修饰符
echo ${(Lou)files[@]}   # 转小写，去重，排序
echo ${(Uj:,:)files[@]} # 转大写并用逗号连接

# 结合参数展开修饰符和数组修饰符
paths=(/usr/bin/ls /home/user/Document.txt /var/log/system.log)
echo ${(L)${paths[@]:t}}  # 获取文件名并转小写: ls document.txt system.log
```

!! 5. 数组的实用操作

!!! 5.1 数组添加和删除元素

```bash
arr=(a b c)

# 添加元素到末尾
arr+=(d e)
echo ${arr[@]}      # a b c d e

# 添加元素到开头
arr=(x y ${arr[@]})
echo ${arr[@]}      # x y a b c d e

# 删除指定索引的元素
unset 'arr[3]'      # 删除第3个元素
```

!!! 5.2 数组查找和替换

```bash
arr=(apple banana apple cherry apple)

# 查找元素位置
for i in {1..${#arr[@]}}; do
    [[ ${arr[i]} == "apple" ]] && echo "Found at index $i"
done

# 替换所有匹配的元素
arr=(${arr[@]/apple/orange})
echo ${arr[@]}      # orange banana orange cherry orange
```

!!! 5.3 数组遍历

```bash
fruits=(apple banana cherry)

# 方式1: 遍历值
for fruit in ${fruits[@]}; do
    echo "Fruit: $fruit"
done

# 方式2: 遍历索引
for i in {1..${#fruits[@]}}; do
    echo "Index $i: ${fruits[i]}"
done

# 方式3: 关联数组的键值遍历
typeset -A fruit_colors
fruit_colors=(apple red banana yellow cherry red)

for key in ${(k)fruit_colors[@]}; do
    echo "${key} is ${fruit_colors[$key]}"
done
```

!! 6. 实际应用示例

!!! 6.1 文件批处理

```bash
# 获取所有.txt文件并处理
txt_files=(*.txt)
if [[ ${#txt_files[@]} -gt 0 ]]; then
    echo "Processing ${#txt_files[@]} files:"
    for file in ${txt_files[@]}; do
        echo "Processing: ${(t)file}"  # 只显示文件名
    done
fi
```

!!! 6.2 配置文件解析

```bash
# 模拟读取配置
config_lines=("name=John" "age=30" "city=Tokyo")
declare -A config

for line in ${config_lines[@]}; do
    key_value=(${(s:=:)line})
    config[${key_value[1]}]=${key_value[2]}
done

echo "Name: ${config[name]}"
```

!!! 6.3 数据统计

```bash
scores=(85 92 78 96 88 79 94)

# 计算平均分
total=0
for score in ${scores[@]}; do
    total=$((total + score))
done
average=$((total / ${#scores[@]}))

echo "Total scores: ${#scores[@]}"
echo "Average: $average"
echo "Highest: ${(n)scores[@]}"  # 数值排序后的最后一个
```

!! 7. 注意事项和最佳实践

# ''索引从1开始'': zsh数组索引从1开始，不是0
# ''引用安全'': 使用 `"${arr[@]}"` 来安全地展开数组
# ''修饰符组合'': 可以组合多个修饰符，但要注意顺序
# ''性能考虑'': 大数组操作时考虑使用适当的修饰符来优化
# ''空数组检查'': 使用 `${#arr[@]}` 检查数组是否为空

!! 8. 常用修饰符速查表

|!修饰符|!功能|!示例|
|`(L)` |转小写 |`${(L)arr[@]}` |
|`(U)` |转大写 |`${(U)arr[@]}` |
|`(C)` |首字母大写 |`${(C)arr[@]}` |
|`(o)` |升序排序 |`${(o)arr[@]}` |
|`(O)` |降序排序 |`${(O)arr[@]}` |
|`(u)` |去重排序 |`${(u)arr[@]}` |
|`(n)` |数值排序 |`${(n)arr[@]}` |
|`(j:x:)` |用x连接 |`${(j:,:)arr[@]}` |
|`(s:x:)` |按x分割 |`${(s:,:)string}` |
|`(k)` |获取关联数组键 |`${(k)assoc_arr[@]}` |
|`(v)` |获取关联数组值 |`${(v)assoc_arr[@]}` |
|`(kv)` |键值对 |`${(kv)assoc_arr[@]}` |
|`:t` |文件basename |`${array[@]:t}` |
|`:h` |文件dirname |`${array[@]:h}` |
|`:r` |移除扩展名 |`${array[@]:r}` |
|`:e` |获取扩展名 |`${array[@]:e}` |


* zsh Shell的数组跟关联数组如何定义？各自有什么不同？
* zsh Shell有字典吗？
* zsh shell的数组修饰符跟参数展开修饰符。
* zsh 中的关联数组的定义方式
