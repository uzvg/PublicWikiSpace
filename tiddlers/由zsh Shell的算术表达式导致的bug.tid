cover: 202411031252975.jpeg
created: 20250618040950477
description: 在zsh中，算术表达式的退出码不是基于操作是否成功执行，而是基于表达式的返回值，表达式的值为0，则退出值为
modified: 20250618133240602
progress: Completed
rating: Valuable
tags: PermanentNotes zsh Shell TroubleShooting Debug
title: 由zsh Shell的算术表达式导致的bug
type: text/vnd.tiddlywiki
visibility: Public

!! 问题描述：

在开发一个用于检测和删除包含敏感词汇文件的Shell脚本时，遇到了一个非常奇怪的现象：同一个文件会出现"删除成功"和"删除失败"两条日志。

!!! 问题现象：

```bash
[INFO]   已删除: ./tiddlers/零输出执行命令.tid
[ERROR]   删除失败: ./tiddlers/零输出执行命令.tid
```

!!! 相关代码：

```bash
# 脚本设置的选项
setopt ERR_EXIT          # 遇到错误立即退出
setopt NO_UNSET          # 使用未定义变量时报错
setopt PIPE_FAIL         # 管道中任何命令失败都返回非零
setopt EXTENDED_GLOB     # 启用扩展通配符
setopt NULL_GLOB         # 通配符无匹配时返回空列表而非错误

# 问题代码段
local deleted_count=0
for file in $sensitive_files; do
    if [[ -f $file ]]; then
        rm -f "$file" && {
            print_info "  已删除: $file"
            ((deleted_count++))
        } || {
            print_error "  删除失败: $file"
        }
    fi
done
```

* 按理说，这段代码的作用，只是删除一个文件，然后做简单的计数运算，出错的可能性极低，但同时报了''已删除''和''删除失败''，这就是一个很奇怪的情况。

!!! 排查过程：

最初怀疑是数组重复导致的问题，但通过调试发现：

```bash
[INFO] 调试 - 原始rg输出行数: 1
[INFO] 调试 - 数组元素个数: 1
[INFO] 调试 - 去重后元素个数: 1
```

数组中确实只有一个元素，排除了重复删除的可能性。

!! 解决方案：

!!! 方案1：使用前置递增（推荐）：

```bash
rm -f "$file" && {
    print_info "  已删除: $file"
    ((++deleted_count))  # 先递增再返回，返回值是非零
} || {
    print_error "  删除失败: $file"
}
```

!!! 方案2：显式处理退出码：

```bash
rm -f "$file" && {
    print_info "  已删除: $file"
    ((deleted_count++)) || true  # 确保不会因为退出码导致失败
} || {
    print_error "  删除失败: $file"
}
```

!!! 方案3：使用赋值语句：

```bash
rm -f "$file" && {
    print_info "  已删除: $file"
    deleted_count=$((deleted_count + 1))  # 赋值语句总是成功
} || {
    print_error "  删除失败: $file"
}
```

!!! 方案4：使用if-else结构（最稳妥）：

```bash
if rm -f "$file"; then
    print_info "  已删除: $file"
    ((deleted_count++))
else
    print_error "  删除失败: $file"
fi
```

!! 根本原因分析：

这个bug的根本原因是zsh中算术表达式的退出码规则。

!!! zsh算术表达式的退出码规则

在zsh中，算术表达式的退出码不是基于操作是否成功执行，而是基于表达式的返回值：

* 如果表达式的值为 `0`，退出码为 `1`（失败）
* 如果表达式的值为 `非零`，退出码为 `0`（成功）

!!! 问题的执行流程

```bash
local deleted_count=0  # 初始值为0

# 执行过程：
((deleted_count++))    # 1. deleted_count 从 0 变为 1
                       # 2. 但表达式返回的是原值 0（后置递增）
                       # 3. 因为返回值是 0，所以退出码为 1
                       # 4. 检测到失败，触发 || 分支
```

!!! 验证代码

```bash
#!/bin/zsh
setopt ERR_EXIT

count=0
echo "测试 1: count=$count"
((count++)) && echo "成功" || echo "失败"  # 输出：失败
echo "现在 count=$count"                  # 输出：现在 count=1

echo "测试 2: count=$count"
((count++)) && echo "成功" || echo "失败"  # 输出：成功
echo "现在 count=$count"                  # 输出：现在 count=2
```

!!! 关键点总结

# 后置递增 `((var++))` 返回递增前的值
# 前置递增 `((++var))` 返回递增后的值
# `ERR_EXIT` 会检查所有命令的退出码，包括算术表达式
# 在复杂的控制结构（`&&` 和 `||`）中，`ERR_EXIT`可能产生意外行为

这是一个非常微妙且容易被忽视的问题，特别是当脚本启用了`ERR_EXIT`选项时。开发者通常不会预期一个简单的计数操作会影响控制流程，但在Shell编程中，理解每个操作的退出码语义是至关重要的。