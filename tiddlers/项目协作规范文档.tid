created: 20250629100850877
description: git项目协作规范文档说明
modified: 20250629192321374
progress: Completed
rating: Plain
tags: PermanentNotes Git GitWorkFlow
title: 项目协作规范文档
type: text/vnd.tiddlywiki
visibility: Public

!! 一、分支管理策略

本项目采用 ''GitHub Flow 工作流''，主张简单、高效、可持续集成。

!!! 1.1 主分支（main）

* `main` 分支为''稳定发布分支''
* 所有上线的代码都从 Pull Request 合并到此分支
* 禁止直接向 `main` 推送代码，所有修改必须通过 PR（Pull Request）

!!! 1.2 功能分支（Feature Branch）

每位开发者在本地或 GitHub 上从 `main` 创建功能分支开发。

''命名规范''（统一使用小写、短横线分隔）：

|tc-max-width|k
|!类型|!命名示例|!说明|
|功能 |`feature/login-page`      |新功能开发       |
|修复 |`bugfix/login-crash`      |修复某个 bug    |
|重构 |`refactor/form-handler`   |结构优化，不改行为逻辑 |
|文档 |`docs/api-usage`          |添加或修改文档     |
|实验 |`experiment/theme-switch` |非正式试验性分支    |

!! 二、提交规范（Commit Message）

采用 [[Conventional Commits|https://www.conventionalcommits.org/]] 规范：

```
<类型>: <简要描述>

[可选详细说明]
```

!!! 常见类型：

|!类型|!含义|
|`feat`     |新功能          |
|`fix`      |Bug 修复       |
|`docs`     |仅文档更改        |
|`refactor` |重构（不影响功能）    |
|`style`    |格式更改（空格、缩进等） |
|`test`     |添加测试代码       |
|`chore`    |构建、依赖、工具等修改  |

''示例：''

```bash
git commit -m "feat: add user registration logic"
git commit -m "fix: resolve crash on login page"
```

!! 三、Pull Request 流程

!!! 3.1 提交 PR 步骤

1. 从 `main` 拉取最新代码并创建分支：

```bash
git checkout main
git pull origin main
git checkout -b feature/xxx
```

2. 开发完成后 push 分支：

```bash
git push origin feature/xxx
```

3. 在 GitHub 上发起 Pull Request（目标分支为 `main`）

4. 描述本次改动内容、关联的 issue、是否有破坏性变更等

5. 至少 1 人 code review 通过后再合并

!!! 3.2 合并规范

* 使用 ''Squash & Merge'' 合并方式，保持提交历史整洁
* 合并后自动删除源分支（选项可在 GitHub PR 设置中勾选）
* 主分支应始终保持可运行、可部署状态

!! 四、分支保护规则（推荐在 GitHub 项目中设置）

* ❌ 禁止直接 push 到 `main` 分支
* ✅ 所有合并必须通过 Pull Request
* ✅ PR 合并前必须：
** 至少通过 1 次代码审查
** 通过 CI 检查（自动测试、lint 等）

!! 五、持续集成（CI）建议（GitHub Actions）

!!! 5.1 推荐任务：

* 格式检查（如 eslint、prettier）
* 单元测试（jest、pytest 等）
* 构建流程验证（是否能正常构建）
* 自动部署（可选）

> 可在 `.github/workflows/` 目录中配置相应 YAML 文件

!! 六、协作建议

* 每人分支最多保持 2 个并行开发任务，避免遗忘与冲突
* PR 优先解决 bug，其次是功能与重构
* 尽可能小步提交（每个提交有意义），避免一次提交改一堆东西
* 建议每周至少同步一次 `main` 分支的变更

!! 七、FAQ（常见问题）

!!! 1. 上游项目更新了，我的分支怎么办？

```bash
git checkout main
git pull origin main
git checkout feature/xxx
git rebase main
```

!!! 2. 合并冲突怎么办？

手动解决冲突后，使用：

```bash
git add .
git rebase --continue   # 如果是 rebase
# 或 git commit          # 如果是 merge
```

!! 附：建议工具

* Git GUI 工具：GitHub Desktop / GitKraken / Sourcetree
* CLI 助手：`tig`、`lazygit`、`gh`（GitHub CLI）
* 提交校验：`commitlint` + `husky`

如你愿意，我也可以帮你直接生成一份 `README.development.md` 或 `CONTRIBUTING.md` 文件，适合直接放入你的开源项目仓库中。需要的话只需告诉我 💬