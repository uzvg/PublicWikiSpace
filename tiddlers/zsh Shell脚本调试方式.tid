created: 20250226075958389
creator: uzvg
description: zsh Shell脚本的调试方式
modified: 20250630010140298
modifier: uzvg
progress: Completed
rating: Plain
tags: zsh Shell PermanentNotes
title: zsh Shell脚本调试方式
type: text/vnd.tiddlywiki
visibility: Public

!! 🟢 1. ''内建的调试选项''

zsh 内置了多种非常有用的“调试模式”：

!!! （1）逐行执行：`set -x`

在脚本中添加：

```zsh
set -x
```

或者在执行时带上：

```zsh
zsh -x your_script.zsh
```

✅ 作用：
在执行每一行命令前，把''展开后的命令''打印到 stderr（非常直观）。

> ''提示''：调试完别忘记关闭：

```zsh
set +x
```

!!! （2）语法检查：`-n`

只检查语法，不执行：

```zsh
zsh -n your_script.zsh
```

✅ 作用：
不会真正运行脚本（也就不会破坏文件系统），先确认语法无误。

!!! （3）显示执行前的所有展开：`set -v`

逐行打印脚本内容（原始行，而不是展开后）。
和 `set -x` 不同，它打印原始脚本行。

!!! （4）严格模式：`set -e` 和 `set -u`

* `set -e`: 一旦有命令返回非零状态，脚本立即退出。
* `set -u`: 遇到''未定义的变量''，立即报错。

示例：

```zsh
set -eu
```

✅ 作用：
可以防止拼错变量名或忽略错误。

!! 🟢 2. ''干跑模式：echo/print 模拟执行''

在危险操作（例如 `rm`, `mv`, `cp`）前，先用 `echo`：

```zsh
echo rm -rf "$target_dir"
```

确认输出再去掉 `echo`。

也可以通过变量控制：

```zsh
DRYRUN=1

if [[ $DRYRUN -eq 1 ]]; then
    echo "Would run: rm -rf $target_dir"
else
    rm -rf "$target_dir"
fi
```

✅ 好处：
不需要每次注释掉危险命令，开关一改就行。

!! 🟢 3. ''在临时目录里调试''

如果脚本会操作大量文件，先：

```zsh
TMPDIR=$(mktemp -d)
```

把脚本逻辑定向到 `$TMPDIR`，确认无误后再切换到真实路径。

✅ 好处：
即使逻辑有误，也只是破坏临时目录。

!! 🟢 4. ''带交互确认''

在关键点插入：

```zsh
read "?About to delete $target_dir. Press Enter to continue or Ctrl+C to abort."
```

或者

```zsh
read -k "REPLY?Proceed? (y/n) "
[[ $REPLY == y ]] || exit 1
```

✅ 好处：
防止“一键全毁”。

!! 🟢 5. ''分步调试''

如果脚本很长，不要一口气执行到底，先：

* 分段执行
* 手动运行每个块
* 逐步验证环境变量和文件状态

也可以把脚本分成多个小函数，逐个调试。

!! 🟢 6. ''调试输出''

加上自己的''日志函数''：

```zsh
log() { print -P "%F{cyan}[DEBUG]%f $*"; }
```

在每个关键步骤打印：

```zsh
log "Processing file $f"
```

✅ 好处：
比简单的 `echo` 更直观。

!! 🟢 7. ''trap 捕获错误''

在脚本开头：

```zsh
trap 'echo "Error at line $LINENO"; exit 1' ERR
```

当脚本报错时打印错误行。

!! 🟢 8. ''在 zsh 调试器里跑（高级）''

zsh 自带一个调试器：

```zsh
zsh -D your_script.zsh
```

也可以在交互模式用：

```zsh
autoload zsh/zprof
```

不过这个用得相对较少，常用还是 `set -x` 和 echo。

!! 🟢 9. ''使用 ShellCheck 静态分析''

虽然 ShellCheck 是偏 bash/sh，但也对 zsh 有帮助：

```bash
shellcheck your_script.zsh
```

可以发现：

* 拼写错误
* 引号遗漏
* 潜在逻辑问题

> 安装：

```
sudo apt install shellcheck
```

或

```
brew install shellcheck
```

!! 🔵 常用组合调试姿势

在危险脚本里，我常用的组合：

```zsh
#!/usr/bin/env zsh
set -euxo pipefail
trap 'echo "Error at line $LINENO"' ERR

# 创建安全的临时目录
TMPDIR=$(mktemp -d)
log() { print -P "%F{yellow}[INFO]%f $*"; }

log "Working directory: $TMPDIR"

# 下面干跑
echo cp important_file "$TMPDIR/"
```

调试结束再去掉 `echo`。