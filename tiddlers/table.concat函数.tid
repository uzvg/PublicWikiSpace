created: 20250629074304982
description: Lua中table.concat函数的作用
modified: 20250629074815510
modifier: uzvg
progress: Completed
rating: Plain
source: Lua table基础
tags: PermanentNotes Lua
title: table.concat函数
type: text/vnd.tiddlywiki
visibility: Public

!! 🌟 一句话解释

`table.concat(t, sep, i, j)` 的作用是：

> ''把表 t 的数组部分的元素拼接成一个字符串''

举个形象的比喻：

* 你有一个数组：`{"a", "b", "c"}`
* 你想要把它变成："a-b-c"

`table.concat()`就专门干这个事情。

!! 📘 基本用法

假设：

```lua
local t = {"apple", "banana", "cherry"}
```

最简单用法：

```lua
local s = table.concat(t)
print(s)
```

输出：

```
applebananacherry
```

默认''没有分隔符''。

!! 📘 加上分隔符

比如用逗号分隔：

```lua
local s = table.concat(t, ", ")
print(s)
```

输出：

```
apple, banana, cherry
```

这样就像“CSV”。

!! 📘 指定拼接范围

假设：

```lua
local t = {"a", "b", "c", "d"}
```

只拼接第2到第3个：

```lua
local s = table.concat(t, "-", 2, 3)
print(s)
```

输出：

```
b-c
```

参数意义：

* `t`：表
* `sep`：分隔符（可选，默认无）
* `i`：开始索引（可选，默认1）
* `j`：结束索引（可选，默认#t）

!! 📘 应用场景

`table.concat()`最常见的用途：

* ✅ 把字符串数组合并成一个大字符串（输出、存储、网络传输）
* ✅ 格式化列表（CSV、日志）

!! 📘 完整例子

```lua
local fruits = {"apple", "banana", "cherry"}

-- 拼接全部
print(table.concat(fruits))      --> applebananacherry

-- 拼接，逗号分隔
print(table.concat(fruits, ", ")) --> apple, banana, cherry

-- 拼接部分
print(table.concat(fruits, "-", 2, 3)) --> banana-cherry
```

!! ⚠️ 注意

* `table.concat()`''只拼接数组部分''（整数索引从1开始）
* 如果数组里有非字符串，会尝试自动转成字符串
* 如果你给的i/j越界，它会自动忽略不存在的索引

!! 🎁 额外提示

如果你有一个''map表''：

```lua
local t = {name="Tom", age="20"}
```

`table.concat(t)`是''不工作的''，因为它不看字符串key。

如果想要把键值对拼接，可以用`pairs()`自己拼：

```lua
local t = {name="Tom", age="20"}
local parts = {}
for k,v in pairs(t) do
    table.insert(parts, k .. "=" .. v)
end
local s = table.concat(parts, ", ")
print(s)
-- 输出：name=Tom, age=20 (键值对)
```