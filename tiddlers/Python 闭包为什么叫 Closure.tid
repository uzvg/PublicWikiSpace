created: 20250607040837005
description: Python中的闭包特性为什么被称作closeure
modified: 20250615152126748
modifier: uzvg
progress: Completed
rating: Plain
source: Python closure
tags: PermanentNotes Python
title: Python 闭包为什么叫 Closure
type: text/vnd.tiddlywiki
visibility: Public

!! 引言：Python 闭包为什么叫 Closure？

> 在 Python 中，闭包（closure）是指内部函数引用了外部函数的变量，即使外部函数已经执行完毕，内部函数依然能访问那些变量。

那么问题来了：为什么这种机制要叫“Closure”？

!! 🧾 一、Closure 一词的含义

* 词源：来自动词 `close`，意为“封闭、包裹”。
* 在计算机中的含义：指一个函数和它所引用的非局部变量一起“打包封闭”起来形成的整体结构。

简而言之：

> Closure = 函数 + 封闭的环境变量（自由变量）

!! 🕰️ 二、闭包的历史来源

闭包最早起源于 1970–1980 年代的函数式编程语言（如 Lisp、Scheme、ML）中。这些语言强调“函数是一等公民”，可以被作为值返回。

但是：

* 当一个内部函数被返回到外部时，它可能会使用外部函数的变量；
* 这时，语言必须保留这些变量的值，否则内部函数就无法正常工作。

于是，语言设计者引入了“闭包”机制：

> 在函数被创建时，将其引用的变量也“打包”保存下来，哪怕作用域已经结束，这些变量依然保留在内存中。

!! 🔍 三、为什么需要“封闭”这些变量？

看例子：

```python
def outer():
    x = 10
    def inner():
        return x
    return inner

f = outer()
print(f())  # 输出 10
```

* `outer()` 结束时，按理说 `x` 应该消失；
* 但 `inner()` 依然能访问 `x`，这是因为 Python 为我们自动创建了一个闭包；
* 被引用的变量 `x` 被保存在一个特殊的 `cell` 对象中，通过 `f.__closure__` 访问。

```python
print(f.__closure__[0].cell_contents)  # 输出 10
```

这些被捕获的变量就叫做 自由变量（free variables），函数则通过 `__code__.co_freevars` 来标记它们。

!! 🧠 四、类比理解闭包

|tc-max-width|k
|!类比|!含义说明|
|📦 快递盒   |函数执行完后，它用到的变量被“装进盒子”，打包带走       |
|🧪 保温杯   |外部变量是热水，闭包像保温杯，函数执行完后还保存着这股“热度” |
|🛠️ 小型对象 |闭包是轻量的函数+状态组合，可以携带运行时环境         |

!! ⚙️ 五、Python 如何实现闭包？

|tc-max-width|k
|!机制|!内容|
|`cell` 对象     |存储外部变量的容器             |
|`__closure__` |函数对象上绑定的 `cell` 元组    |
|`co_freevars` |`__code__` 对象上列出自由变量名 |

函数与它的运行环境打包成闭包对象，即使作用域结束，变量依然保留。

!! ✅ 总结

|tc-max-width|k
|!项目|!内容|
|📌 名称由来 |Closure 表示函数与其自由变量“封闭”在一起形成一个整体           |
|📦 意义   |确保内部函数可以在未来访问原来的环境变量                      |
|🔍 应用   |构建装饰器、工厂函数、延迟执行逻辑、维持状态等                   |
|🧬 底层实现 |使用 `cell` 对象保存变量，绑定在函数的 `__closure__` 属性中 |

> 💡 一句话总结：
> 闭包（closure）是函数与其引用的外部变量环境“封闭”在一起的对象，使得函数在离开定义作用域后仍能记住环境变量。