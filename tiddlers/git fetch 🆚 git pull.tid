created: 20250620151051180
description: git fetch只是把远程分支的状态同步到本地，不影响任何本地分支，git pull --rebase 就想当于git fetch与git rebase两条命令的合体
modified: 20250620151635502
modifier: uzvg
progress: Completed
rating: Plain
source: git rebase的常见工作流程
tags: PermanentNotes Git
title: git fetch 🆚 git pull
type: text/vnd.tiddlywiki
visibility: Public

!! 引言：

在`git rebase`的工作流程中，经常需要用到另一个命令，那就是`git fetch`，`git fetch` 与 `git pull` 有什么不同呢？为什么不直接使用`git pull`？

!! git fetch 与 git pull：

!!! 📌 关键点：

* `git fetch`：''仅拉取远程更新，不会修改当前工作分支的内容''。它只是把远程分支的状态同步到本地，比如 `origin/main`。
* `git pull`：''等价于'' `git fetch` 后紧接着做一次合并（默认是 `git merge`，也可以配置成 `git rebase`）。

!!! 💡 git pull --rebase 是什么？

`git pull --rebase` 本质上就相当于以下两个命令的结合：

```bash
git fetch origin
git rebase origin/main
```

但注意：

* `git pull --rebase` 会自动执行所有操作，过程不可中断或插入检查步骤；
* `git fetch` + `git rebase` 是显式的两步流程，更可控，适合在生产环境中避免出错。

!! 2. 最佳的实践建议 ✅

在生产环境中，推荐采用如下做法：

```bash
git fetch origin
git rebase origin/main
```

!!! 为什么这样做更好？

* ✅ ''历史更整洁''：使用 rebase 可以避免多余的 merge commit，保持提交历史线性；
* ✅ ''操作更可控''：fetch 后可以先查看远程分支是否有更新，再决定是否变基；
* ✅ ''避免冲突混乱''：合并冲突更容易在 rebase 中集中处理；
* ✅ ''团队协作更清晰''：代码审查时，一条线性历史比杂乱的 merge 树更易阅读与审计。

!!! 🔧 可选配置：默认使用 rebase 拉取

如需简化操作，可配置 git 默认使用 rebase：

```bash
git config --global pull.rebase true
```

之后，`git pull` 就会默认执行变基操作，等同于 `git pull --rebase`。