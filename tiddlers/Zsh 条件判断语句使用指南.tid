created: 20250629184326379
description: Zsh 条件判断语句使用指南
modified: 20250629184547438
progress: Completed
rating: Plain
tags: PermanentNotes zsh Shell
title: Zsh 条件判断语句使用指南
type: text/vnd.tiddlywiki
visibility: Public

!! 核心原则：

在 zsh 中选择条件判断语句的核心原则是：''根据数据类型和判断目的选择最合适的工具''

* ''处理数字''：优先用 `(( ))`，因为它就是为数学运算设计的
* ''处理字符串''：优先用 `[[ ]]`，因为它支持模式匹配和正则表达式
* ''需要兼容性''：才用 `[ ]`

实际编程中，你会发现 90% 的情况下都是在 `[[ ]]` 和 `(( ))` 之间选择。判断标准很简单：如果是纯数字计算，用 `(( ))`；如果涉及字符串或文件，用 `[[ ]]`。

!! 1. `[ ]` (test 命令) - 传统兼容性判断

!!! 使用场景
* 需要 POSIX 兼容性时
* 简单的字符串和文件判断
* 与其他 shell 保持兼容

!!! 典型用法
```bash
# 文件存在性判断
if [ -f "$file" ]; then
    echo "文件存在"
fi

# 简单字符串判断
if [ "$var" = "value" ]; then
    echo "字符串相等"
fi

# 简单数值判断（作为字符串比较）
if [ "$num" -gt 10 ]; then
    echo "数字大于10"
fi
```

!!! 限制
* 不支持正则表达式
* 变量必须加引号
* 功能相对有限

!! 2. `[[ ]]` - 现代字符串和模式判断

!!! 使用场景（推荐优先使用）
* ''字符串操作''（最佳选择）
* ''模式匹配和通配符''
* ''正则表达式匹配''
* ''文件和目录判断''
* ''变量存在性判断''

!!! 典型用法
```bash
# 字符串匹配（最佳实践）
if [[ "$name" == "John" ]]; then
    echo "姓名匹配"
fi

# 模式匹配
if [[ "$file" == *.txt ]]; then
    echo "是文本文件"
fi

# 正则表达式匹配
if [[ "$email" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
    echo "有效的邮箱地址"
fi

# 字符串包含判断
if [[ "$string" == *"substring"* ]]; then
    echo "包含子字符串"
fi

# 变量是否为空
if [[ -n "$var" ]]; then
    echo "变量不为空"
fi

# 文件类型判断
if [[ -d "$path" ]]; then
    echo "是目录"
fi
```

!!! 数值比较（可用但不推荐）
```bash
# 虽然可以用，但不是最佳实践
if [[ "$num" -gt 10 ]]; then
    echo "数字大于10"
fi
```

!! 3. `(( ))` - 数学运算和数值判断

!!! 使用场景（数值操作的最佳选择）
* ''纯数值计算和比较''
* ''算术表达式''
* ''数值变量的递增递减''
* ''复杂的数学条件''

!!! 典型用法
```bash
# 数值比较（最佳实践）
if (( num > 10 )); then
    echo "数字大于10"
fi

# 复杂数学表达式
if (( (x + y) * z > 100 )); then
    echo "复杂计算结果大于100"
fi

# 数值范围判断
if (( num >= 10 && num <= 20 )); then
    echo "数字在10到20之间"
fi

# 奇偶数判断
if (( num % 2 == 0 )); then
    echo "偶数"
fi

# 变量递增
(( count++ ))
(( sum += value ))
```

!!! 优势
* 不需要 `$` 引用变量
* 支持完整的算术运算符
* 性能更好（纯数值计算）

!! 4. 实际使用惯例总结

!!! 推荐的判断选择流程

1. ''数值计算和比较'' → 使用 `(( ))`
2. ''字符串操作'' → 使用 `[[ ]]`
3. ''文件和目录操作'' → 使用 `[[ ]]`
4. ''需要兼容性'' → 使用 `[ ]`

!!! 具体场景示例

; 场景1：检查用户输入的数字
```bash
# 推荐方式
read -p "请输入一个数字: " num
if (( num > 0 && num < 100 )); then
    echo "数字在有效范围内"
fi
```

; 场景2：检查文件名模式
```bash
# 推荐方式
for file in *; do
    if [[ "$file" == *.log && -f "$file" ]]; then
        echo "找到日志文件: $file"
    fi
done
```

; 场景3：验证邮箱格式
```bash
# 推荐方式
if [[ "$email" =~ ^[^@]+@[^@]+\.[^@]+$ ]]; then
    echo "邮箱格式正确"
fi
```

; 场景4：数值计算
```bash
# 推荐方式
score=85
if (( score >= 90 )); then
    grade="A"
elif (( score >= 80 )); then
    grade="B"
elif (( score >= 70 )); then
    grade="C"
else
    grade="F"
fi
```

!! 5. 记忆口诀

* ''数字算术用双括号'' `(( ))`
* ''字符串匹配用双方括号'' `[[ ]]`
* ''兼容性要求用单方括号'' `[ ]`

!! 6. 常见错误避免

!!! 错误示例
```bash
# 错误：在 (( )) 中使用字符串比较
if (( "$name" == "John" )); then  # 错误！
    echo "姓名匹配"
fi

# 错误：数值比较使用字符串操作
if [[ "$num" > 10 ]]; then  # 这是字符串比较！
    echo "可能不是你想要的结果"
fi
```

!!! 正确示例
```bash
# 正确：字符串比较
if [[ "$name" == "John" ]]; then
    echo "姓名匹配"
fi

# 正确：数值比较
if (( num > 10 )); then
    echo "数字大于10"
fi
```

!! 7. 性能考虑

* `(( ))` 在数值运算中性能最佳
* `[[ ]]` 在字符串操作中性能最佳
* `[ ]` 性能较低，但兼容性最好

遵循这些惯例，你的 zsh 脚本会更加清晰、高效和可维护。