caption: @
created: 20250703000645911
modified: 20250703154131447
order: 1
tags: ParameterExpansionFlags PermanentNotes
title: ZshShellParameterExpansionFlags/@
type: text/vnd.tiddlywiki

!! 功能解释：

!!! 简而言之：

`(@)` flag 的作用是：

> ''在双引号中''，将数组中的每个元素当作一个''独立的'' word（单词）来处理，而不是合并成一个整体字符串。

!!! 📌 为什么要用它？

在 Zsh 中，''默认数组在双引号中会合并为一个字符串''，你可能以为会保留元素边界，但实际不会。

加上 `(@)` flag，才能保证数组元素不被合并。

!!! ✅ 官方说法解读：

> `"${(@)array}"` 等价于 `"${array[@]}"`

也就是说：

* `"${array}"` → 合并为一个字符串
* `"${array[@]}"` 或 `"${(@)array}"` → 每个元素是一个独立的参数

!! 🟢 最常用的实际例子

!!! 🎯 例1：打印数组中的每个元素（保留边界）

```zsh
arr=("one word" "two words" "three")

# 不加 (@)：
print -- "${arr}"
```

''输出：''

```
one word two words three   ← 所有元素合并成一个参数
```

```zsh
# 加 (@)：
print -- "${(@)arr}"
```

''输出：''

```
one word
two words
three
```

✅ 每个数组元素独立输出，换行表示是多个参数

!!! 🎯 例2：传参给命令时保留参数结构

```zsh
args=("--opt" "value with space")

# 错误方式：参数会被合并
some_command "${args}"
# 实际上传入的是一个参数 "--opt value with space"

# 正确方式
some_command "${(@)args}"
# 传入的是两个参数 "--opt" 和 "value with space"
```

这在你写 shell 脚本传参给命令（比如 `rsync`, `ssh`, `curl`）时非常重要。

!!! 🎯 例3：提取数组子段，也保留多个 word

```zsh
arr=(a b c d e)

print -- "${(@)arr[2,4]}"
```

''输出：''

```
b
c
d
```

!! 🟡 和其他 flag 的区别

你可能会疑惑：这个 `(@)` 和 `(s.:.)`、`(f)` 有什么区别？

|tc-max-width|k
| Flag   | 功能             | 是否按数组元素分割 |
| `(@)`  | 拆分数组元素为多个 word | ✅         |
| `s.:.` | 自定义分隔符进行字段拆分   | ❌（拆字符串）   |
| `f`    | 按换行拆分          | ❌（拆字符串）   |

也就是说：

* `(@)`：用于 ''数组''
* `s/f/z`：用于 ''字符串中的字段''

!! 🟢 小结

✅ ''功能''：
让数组中的每个元素在双引号中保留为独立 word（防止被合并）

✅ ''用法等价于''：

* `"${(@)arr}"` = `"${arr[@]}"`

✅ ''常用于''：

* 遍历数组
* 将数组参数传入命令时，避免参数合并错误
* 保持子数组切片的结构

如果你想进一步组合 `(@)` 和其它 flag（比如 `s`, `f`, `q` 等）一起用，我也可以提供案例。是否继续？
