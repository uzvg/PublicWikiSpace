created: 20250604012037247
description: Python中的元组跟集合之间的区别以及各自的应用场景
modified: 20250604012513931
modifier: uzvg
progress: Completed
rating: Promising
source: variables(1748886675392)
tags: PermanentNotes Python
title: Python中的集合(set)与元组(tuple)
type: text/vnd.tiddlywiki
visibility: Public

!! 一、基本定义

|tc-max-width|k
|!数据结构|!描述|
|`tuple`（元组） |有序的、不可变的序列。使用 `()` 创建，如 `(1, 2, 3)`。 |
|`set`（集合） |无序的、不重复的元素集合。使用 `{}` 或 `set()` 创建，如 `{1, 2, 3}`。 |

!! 二、主要区别

|tc-max-width|k
| 特性 | `tuple`（元组） | `set`（集合） |
| 是否有序 | ✅ 有序 | ❌ 无序 |
| 是否可变 | ❌ 不可变 | ✅ 可变 |
| 是否支持重复元素 | ✅ 支持 | ❌ 不支持 |
| 是否可哈希 | ✅ 可哈希（可做字典键） | ❌ 不可哈希（除非使用 `frozenset`） |

!! 三、常见用途

; `tuple` 应用场景
* 存储一组''固定不变的相关值''（如经纬度、RGB值）：

```python
location = (39.9, 116.3)
color = (255, 0, 0)
```

* 作为字典的键：

```python
my_dict = { (1, 2): "value" }
```

* 用于函数多值返回：

```python
def get_user():
    return ("Tom", 25)

name, age = get_user()
```

; `set` 应用场景

* 去重操作：

```python
unique_items = set([1, 2, 2, 3])  # {1, 2, 3}
```

* 集合运算（交集、并集、差集）：

```python
a = {1, 2, 3}
b = {3, 4, 5}
a & b  # {3}
a | b  # {1, 2, 3, 4, 5}
a - b  # {1, 2}
```

* 判断是否包含某个元素（效率高）：

```python
if 3 in a:
    print("存在")
```

!! 四、小结

|!使用需求       |推荐数据结构  |
|有顺序且不可变的数据 |`tuple` |
|无顺序且需唯一性数据 |`set`   |
|可作为字典键使用   |`tuple` |
|需要集合运算操作   |`set`   |