created: 20250629042521420
description: Lua table 基础
modified: 20250629101459729
modifier: uzvg
progress: Completed
rating: Plain
source: Lua知识点大纲
tags: PermanentNotes Lua
title: Lua table基础
type: text/vnd.tiddlywiki
visibility: Public

!! 前言：

Lua中table的基础知识，主要包括了以下内容：

# ''表的创建''
# ''表的访问''
# ''表的修改''
# ''表的删除''
# ''表的遍历''
# ''表的长度''
# ''表的元表（metatable）与元方法''
# ''常用的表操作函数（`table`库）''
# ''表与引用''

!! 1️⃣ 表的创建

!!! 📘 基本创建

```lua
-- 创建一个空表
local t = {}
```

```lua
-- 创建一个初始化的表
local person = {name = "Alice", age = 30}
```

> ''注意：''

* Lua表既可以看作数组，也可以看作字典，二者没有本质区别。

!! 2️⃣ 表的访问

!!! 📘 使用点语法（字段名是合法标识符）

```lua
print(person.name)  --> Alice
```

!!! 📘 使用方括号（任何类型的key）

```lua
print(person["name"])  --> Alice
```

```lua
local t = {}
t[10] = "Ten"
print(t[10])  --> Ten
```

> ''注意：''

* 点语法只能用于字符串key且key是合法标识符（不能包含空格或特殊字符）。
* 方括号可以用于''任何key类型''。

!! 3️⃣ 表的修改

!!! 📘 添加或更新键值

```lua
person.age = 31      -- 更新
person.gender = "F"  -- 新增
```

```lua
t[20] = "Twenty"
```

> ''注意：''

* 表中不存在的key赋值，相当于新增。

!! 4️⃣ 表的删除

!!! 📘 删除元素（设置为nil）

```lua
person.age = nil
```

> ''注意：''

* Lua没有真正的“删除函数”，设置为`nil`即表示删除。
* 如果是数组部分，删除会影响`#`运算符的长度。

!! 5️⃣ 表的遍历

!!! 📘 `pairs()` 遍历所有键值

```lua
local t = {a=1, b=2, c=3}
for k, v in pairs(t) do
    print(k, v)
end
```

输出：

```
a   1
b   2
c   3
```

> ''注意：''

* `pairs()`可以遍历所有key（包括非整数key）。

!!! 📘 `ipairs()` 顺序遍历数组部分（从1开始到第一个`nil`）

```lua
local arr = {"one", "two", "three"}
for i, v in ipairs(arr) do
    print(i, v)
end
```

输出：

```
1   one
2   two
3   three
```

> ''注意：''

* 当遇到第一个`nil`即停止。
* 不适用于稀疏数组（中间有nil）。

!! 6️⃣ 表的长度

!!! 📘 `#` 运算符

```lua
local arr = {"a", "b", "c"}
print(#arr)  --> 3
```

> ''注意：''

* `#`只统计''从索引1开始连续非nil元素''。
* 如果中间有nil，结果不可预测。

示例：

```lua
local arr = {"a", nil, "c"}
print(#arr)  --> 1 或 3 (实现相关)
```

!! 7️⃣ 表的元表与元方法

表可以''通过元表实现运算符重载''等高级功能。

```lua
local t = {}
local mt = {
    __add = function(a,b)
        return a.value + b.value
    end
}
setmetatable(t, mt)

local a = {value=10}
setmetatable(a, mt)
local b = {value=20}
setmetatable(b, mt)

print(a+b)  --> 30
```

> ''注意：''

* 元表高级用法较多，若要深入，可以再详细讲解。

!! 8️⃣ 常用的表操作函数 (`table`库)

Lua自带`table`库，提供丰富操作：

!!! 📘 `table.insert(t, [pos], value)`

在表中插入元素。

```lua
local t = {"a", "b"}
table.insert(t, "c")  -- 在末尾插入
table.insert(t, 2, "x") -- 在位置2插入

-- t = {"a", "x", "b", "c"}
```

!!! 📘 `table.remove(t, [pos])`

移除并返回指定位置元素。

```lua
local t = {"a", "b", "c"}
local v = table.remove(t, 2)  -- 移除 "b"
print(v)  --> b
-- t = {"a", "c"}
```

!!! 📘 `table.concat(t, sep, i, j)`

拼接数组部分的字符串。

```lua
local t = {"one", "two", "three"}
print(table.concat(t, ", "))  --> one, two, three
```

!!! 📘 `table.sort(t, comp)`

对数组部分排序。

```lua
local t = {5, 2, 9, 1}
table.sort(t)
-- t = {1,2,5,9}
```

自定义排序：

```lua
table.sort(t, function(a,b)
    return a > b
end)
-- t = {9,5,2,1}
```

!! 9️⃣ 表与引用

!!! 📘 表是引用类型

```lua
local t1 = {x=1}
local t2 = t1
t2.x = 100
print(t1.x)  --> 100
```

> ''注意：''

* 两个变量指向''同一块表''。
* 若需克隆表，请自己写深拷贝函数。

# 🎁 附加：示例综合

```lua
-- 创建表
local t = {name="Tom", scores={90,80,70}}

-- 添加
t.age = 20

-- 修改
t.name = "Jerry"

-- 访问
print(t.scores[1])  --> 90

-- 删除
t.age = nil

-- 遍历
for k,v in pairs(t) do
    print(k,v)
end

-- 插入排序
local nums = {3,1,4}
table.insert(nums,2)
table.sort(nums)

-- 输出排序后
for i,v in ipairs(nums) do
    print(i,v)
end
```

如果需要，我可以进一步：
✅ 深入讲解元表
✅ 演示深拷贝表
✅ 举更多实用例子

只需告诉我！
