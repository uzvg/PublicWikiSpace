created: 20250630013115360
description: zsh Shell 参数扩展体系结构
modified: 20250630013820514
progress: Completed
rating: Plain
tags: PermanentNotes zsh Shell
title: zsh Shell 参数扩展体系结构
type: text/vnd.tiddlywiki
visibility: Public

!! 一、整体语法结构

```
${(flags)parameter操作:modifiers}
```

其中"parameter操作"包括：

* 基础扩展：`parameter`, `parameter:-default`, `parameter:=default`等
* 模式替换：`parameter/pattern/replacement`, `parameter//pattern/replacement`等  
* 切片操作：`parameter:offset:length`
* 数组下标：`parameter[index]`

!! 二、执行优先级和作用顺序

```
基础参数扩展（包括替换/切片） → 标志处理 → 修饰符处理
```

!!! 详细执行流程

1. ''基础参数扩展''：

* 参数解析：获取变量值
* 默认值处理：`:-`, `:=`, `:?`, `:+` 等
* 模式替换：`/pattern/replacement`, `//`, `#`, `##`, `%`, `%%`
* 切片操作：`:offset:length`

2. ''标志处理''：按标志改变扩展行为（分割、排序、引用等）

3. ''修饰符应用''：最后应用路径修饰符和其他后处理

!! 三、各组件详细说明

!!! 3.1 基础扩展形式

```bash
# 基本形式
${parameter}          # 基础扩展
${parameter:-default} # 带默认值
${parameter:=default} # 赋值默认值
${parameter:?error}   # 错误检查
${parameter:+replace} # 条件替换

# 长度和存在性
${#parameter}         # 长度
${+parameter}         # 是否存在（返回1或0）
```

!!! 3.2 标志（Flags）系统

标志放在参数名前，用括号包围：`${(flags)parameter}`

; 核心标志分类

''A. 数组处理标志''

```bash
${(@)array}     # 保持数组元素分离
${(*)array}     # 类似@，但行为略有不同
${(o)array}     # 排序（升序）
${(O)array}     # 排序（降序）
${(u)array}     # 去重
```

''B. 分割和连接标志''

```bash
${(s:sep:)param}  # 按sep分割字符串为数组
${(j:sep:)array}  # 用sep连接数组为字符串
${(z)param}       # 按shell词法分割
${(Z:c:)param}    # 按指定引用风格分割
```

''C. 引用和转义标志''

```bash
${(q)param}       # Shell引用
${(qq)param}      # 双重引用
${(Q)param}       # 移除引用
${(V)param}       # 可见字符转换
```

''D. 类型转换标志''

```bash
${(U)param}       # 转大写
${(L)param}       # 转小写
${(C)param}       # 首字母大写
${(P)param}       # 间接扩展（变量的变量）
```

''E. 数值处理标志''

```bash
${(i)array}       # 数组索引
${(I)array}       # 反向匹配索引
${(k)assoc}       # 关联数组的键
${(v)assoc}       # 关联数组的值
```

; 标志组合规则
* 多个标志可以组合：`${(sj:,:)array}` 先分割再连接
* 冲突标志以最后一个为准
* 某些标志有依赖关系

!!! 3.3 切片操作

```bash
${parameter:offset}        # 从offset开始到结尾
${parameter:offset:length} # 从offset开始取length个字符
${parameter:(-n)}          # 从倒数第n个开始
${parameter:0:(-n)}        # 除了最后n个字符
```

; 切片与数组

```bash
${array:1:3}    # 取数组第2-4个元素
${(@)array:1:3} # 保持数组形式
```

!!! 3.4 模式替换

```bash
# 基本替换
${parameter/pattern/replacement}    # 替换第一个匹配
${parameter//pattern/replacement}   # 替换所有匹配
${parameter/#pattern/replacement}   # 替换开头匹配
${parameter/%pattern/replacement}   # 替换结尾匹配

# 删除操作
${parameter#pattern}     # 删除开头最短匹配
${parameter##pattern}    # 删除开头最长匹配
${parameter%pattern}     # 删除结尾最短匹配
${parameter%%pattern}    # 删除结尾最长匹配
```

!!! 3.5 修饰符（Modifiers）

修饰符以冒号开头，可以连接多个：

; 文件路径修饰符

```bash
${parameter:h}    # 头部（目录部分）
${parameter:t}    # 尾部（文件名）
${parameter:r}    # 根部（去扩展名）
${parameter:e}    # 扩展名
${parameter:a}    # 绝对路径
${parameter:A}    # 绝对路径（解析符号链接）
```

; 大小写修饰符

```bash
${parameter:u}    # 转大写
${parameter:l}    # 转小写
```

; 其他修饰符

```bash
${parameter:s/pat/rep/}  # 替换（类似//但在修饰符位置）
${parameter:gs/pat/rep/} # 全局替换
```

!! 四、组合使用示例

!!! 4.1 复杂组合示例

```bash
# 示例1：理解执行顺序
text="hello,world,test"

# 错误理解：认为先应用标志再替换
${(U)text//,/_}  # 结果：HELLO_WORLD_TEST
# 实际过程：text先进行//,/_替换 → 然后应用(U)标志转大写

# 示例2：证明替换在标志之前
array=(hello,world test,case)
echo ${(@)array//,/_}     # 数组每个元素先替换逗号再保持数组格式
# 结果：hello_world test_case

# 示例3：复杂路径处理
files=(/path/to/file1.txt /path/to/file2.log /another/file3.txt)

# 先过滤.txt文件，再应用修饰符，最后用标志保持数组
${(@)${files:#*.txt}:t:r}
# 执行过程：
# 1. ${files:#*.txt} - 基础扩展中的模式匹配
# 2. :t:r - 应用修饰符（取文件名，去扩展名）
# 3. (@) - 最外层标志保持数组形式

# 示例4：演示所有三个阶段
path="/usr/local/bin:/usr/bin:/bin"
${(j:;:)${(s.:.)path%/usr*}:u}
# 执行过程：
# 1. 基础扩展：path%/usr* (删除匹配/usr*的后缀，这里无效果)
# 2. 标志：(s.:.) 按冒号分割为数组
# 3. 修饰符：:u 转大写  
# 4. 标志：(j:;:) 用分号连接
```

!!! 4.2 实际应用场景

```bash
# 场景1：批量文件重命名预处理
for file in *.jpg; do
    newname=${${file:r}:l}_processed.${file:e}
    echo "mv '$file' '$newname'"
done

# 场景2：配置文件解析
config="key1=value1,key2=value2,key3=value3"
keys=(${(s:,:)config//=/|})
values=(${(@)keys#*|})
keys=(${(@)keys%|*})

# 场景3：路径处理
paths="/usr/bin:/usr/local/bin:/home/user/bin"
# 转换为数组并过滤存在的路径
valid_paths=(${(@)${(s.:.)paths}(N/)})
```

!! 五、学习建议和最佳实践

!!! 5.1 学习顺序
1. 掌握基础扩展形式
2. 理解常用标志（@、s、j、o）
3. 学习切片和基本替换
4. 掌握文件路径修饰符
5. 组合使用和复杂场景

!!! 5.2 调试技巧

```bash
# 使用print -l 显示数组
print -l ${(@)result}

# 分步骤调试复杂扩展
step1=${(s:,:)input}
step2=${(@)step1#prefix}
step3=${(@)step2:suffix}
```

!!! 5.3 常见陷阱

* 忘记使用 `(@)` 标志导致数组被意外连接
* 标志和修饰符的执行顺序混淆
* 在双引号内使用时的行为差异
* 空值和未定义变量的处理

!!! 5.4 性能考虑

* 避免过度复杂的嵌套扩展
* 对于大数据量，考虑分步处理
* 合理使用标志避免不必要的分割/连接操作

这个体系虽然复杂，但掌握了结构和执行顺序后，就能够灵活组合使用了。建议从简单的场景开始练习，逐步增加复杂度。